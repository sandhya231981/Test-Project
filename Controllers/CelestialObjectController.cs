using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.AspNetCore.Mvc;using Microsoft.AspNetCore.Http;using AspNetCoreWebAPIStarChart.Data;using AspNetCoreWebAPIStarChart.Models;using System.Net.Http;

namespace AspNetCoreWebAPIStarChart.Controllers{    [Route("api/CelestialObjects/")]    public class CelestialObjectController : ControllerBase    {        private readonly ApplicationDbContext _context;        public CelestialObjectController(ApplicationDbContext context)        {            _context = context;            }        [HttpGet]        public IActionResult GetAll()        {            var celestialObjects = _context.CelestialObjects.Where(e => e.OrbitedObjectId == 0).ToList();

            if ((celestialObjects == null)|| (celestialObjects.Count == 0))                return NotFound("CelesticalObject is not Found");            foreach (var celestialObject in celestialObjects)            {                celestialObject.Satellites = _context.CelestialObjects.Where(e => e.OrbitedObjectId == celestialObject.Id).ToList();            }            return Ok(celestialObjects);        }        [HttpGet]        [Route("/GetById/{id}")]        public IActionResult GetById(int id)        {            var celestialObjs = _context.CelestialObjects.Where(e => e.Id == id).ToList();

            if ((celestialObjs == null) || (celestialObjs.Count == 0))                return NotFound("CelesticalObject is not Found");            foreach (var celestialObject in celestialObjs)            {                celestialObject.Satellites = _context.CelestialObjects.Where(e => e.OrbitedObjectId == celestialObject.Id).ToList();            }            return Ok(celestialObjs);        }        [HttpGet]        [Route("/GetByName/{name}")]        public IActionResult GetByName(string name)        {            var celestialObjs = _context.CelestialObjects.Where(e => e.Name == name).ToList();            if ((celestialObjs == null) || (celestialObjs.Count == 0))                return NotFound("CelesticalObject is not Found");            foreach (var celestialObject in celestialObjs)            {                celestialObject.Satellites = _context.CelestialObjects.Where(e => e.OrbitedObjectId == celestialObject.Id).ToList();            }            return Ok(celestialObjs);        }        [HttpPost]
        [Produces("application/json")]
        public IActionResult Create([FromBody]CelestialObject celestialObject)        {            if (!ModelState.IsValid)                return BadRequest("Not a valid model");             celestialObject.Id = 0;            _context.CelestialObjects.Add(celestialObject);            _context.SaveChanges();            return Ok(celestialObject);        }        [HttpPut]
        [Produces("application/json")]
        public IActionResult Update([FromBody]CelestialObject celestialObject)        {            if (!ModelState.IsValid)                return BadRequest("Not a valid model");            var celestialObjs = _context.CelestialObjects.Where(e => e.Id == celestialObject.Id).FirstOrDefault();            if (celestialObjs == null)                return NotFound("CelesticalObject is not Found");            celestialObjs.Name = celestialObject.Name;            celestialObjs.OrbitedObjectId = celestialObject.OrbitedObjectId;            celestialObjs.OrbitalPeriod = celestialObject.OrbitalPeriod;            _context.SaveChanges();            return Ok("CelestilObject Upated Succsessfuly!!!");        }        [HttpPatch("{id}/{name}")]        public IActionResult RenameObject(int id, string name)        {            var celestialObjs = _context.CelestialObjects.Where(e => e.Id == id).FirstOrDefault();            if (celestialObjs == null)                return NotFound("CelesticalObject is not Found");            celestialObjs.Name = name;                       _context.SaveChanges();            return Ok("CelestilObject Upated Succsessfuly!!!");        }        [HttpDelete]        [Route("{id}")]        public IActionResult Delete(int id)        {            var celestialObjs = _context.CelestialObjects.Where(a => a.Id == id || a.OrbitedObjectId == id).ToList();            if ((celestialObjs == null) || (celestialObjs.Count == 0))                return NotFound("CelesticalObject is not Found");            _context.CelestialObjects.RemoveRange(celestialObjs);            _context.SaveChanges();
                     

            return Ok("CelestilObject Deleted Succsessfuly!!!");        }    }}